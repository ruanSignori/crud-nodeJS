{"version":3,"file":"crud-node.cjs.production.min.js","sources":["../src/controllers/protocols.ts","../src/controllers/helpers.ts","../src/controllers/get-users/index.ts","../src/database/mongo.ts","../src/repositories/get-users/mongo-get-users.ts","../src/repositories/create-user/mongo-create-user.ts","../src/controllers/create-user/index.ts","../src/repositories/update-user/mongo-update-user.ts","../src/controllers/update-user/index.ts","../src/repositories/delete-user/mongo-delete-user.ts","../src/controllers/delete-user/index.ts","../src/index.ts"],"sourcesContent":["export interface HttpResponse<T> {\r\n  statusCode: HttpStatusCode;\r\n  body: T;\r\n}\r\n\r\nexport interface HttpRequest<Body> {\r\n  params?: any;\r\n  headers?: any;\r\n  body?: Body;\r\n}\r\n\r\nexport enum HttpStatusCode {\r\n  OK = 200,\r\n  CREATED = 201,\r\n  BAD_REQUEST = 400,\r\n  SERVER_ERROR = 500,\r\n}\r\n\r\nexport interface IController {\r\n  handle(httpRequest: HttpRequest<unknown>): Promise<HttpResponse<unknown>>;\r\n}\r\n","import { HttpResponse, HttpStatusCode } from \"./protocols\";\r\n\r\nexport const ok = <T>(body: any): HttpResponse<T> => ({\r\n  statusCode: HttpStatusCode.OK,\r\n  body: body,\r\n});\r\n\r\nexport const created = <T>(body: any): HttpResponse<T> => ({\r\n  statusCode: HttpStatusCode.CREATED,\r\n  body: body,\r\n});\r\n\r\nexport const badRequest = (message: string): HttpResponse<string> => {\r\n  return {\r\n    statusCode: HttpStatusCode.BAD_REQUEST,\r\n    body: message,\r\n  };\r\n};\r\n\r\nexport const serverError = (): HttpResponse<string> => {\r\n  return {\r\n    statusCode: HttpStatusCode.SERVER_ERROR,\r\n    body: \"Algo deu errado\",\r\n  };\r\n};\r\n","import { User } from \"../../models/user\";\r\nimport { badRequest, ok, serverError } from \"../helpers\";\r\nimport { HttpResponse, IController } from \"../protocols\";\r\nimport { IGetUsersRepository } from \"./protocols\";\r\n\r\nexport class GetUsersController implements IController {\r\n  constructor(private readonly getUsersRepository: IGetUsersRepository) {}\r\n\r\n  async handle(): Promise<HttpResponse<User[] | string>> {\r\n    try {\r\n      const users = await this.getUsersRepository.getUsers();\r\n\r\n      return ok<User[]>(users);\r\n    } catch (error) {\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { MongoClient as Mongo, Db } from \"mongodb\";\r\n\r\nexport const MongoClient = {\r\n  client: undefined as unknown as Mongo,\r\n  db: undefined as unknown as Db,\r\n\r\n  async connect(): Promise<void> {\r\n    const url = process.env.MONGODB_URL || \"localhost:27017\";\r\n    const username = process.env.MONGODB_USERNAME;\r\n    const password = process.env.MONGODB_PASSWORD;\r\n\r\n    const client = new Mongo(url, { auth: { username, password } });\r\n    const db = client.db(\"users-db\");\r\n\r\n    this.client = client;\r\n    this.db = db;\r\n\r\n    console.log(\"Connect to mongodb\");\r\n  },\r\n};\r\n","import { IGetUsersRepository } from \"../../controllers/get-users/protocols\";\r\nimport { MongoClient } from \"../../database/mongo\";\r\nimport { User } from \"../../models/user\";\r\nimport { MongoUser } from \"../mongo-protocols\";\r\n\r\nexport class MongoGetUsersRepository implements IGetUsersRepository {\r\n  async getUsers(): Promise<User[]> {\r\n    const users = await MongoClient.db\r\n      .collection<MongoUser>(\"users\")\r\n      .find({})\r\n      .toArray();\r\n\r\n    return users.map(({ _id, ...rest }) => ({\r\n      ...rest,\r\n      id: _id.toHexString(),\r\n    }));\r\n  }\r\n}\r\n","import {\r\n  CreateUserParams,\r\n  ICreateUserRepository,\r\n} from \"../../controllers/create-user/protocols\";\r\nimport { MongoClient } from \"../../database/mongo\";\r\nimport { User } from \"../../models/user\";\r\nimport { MongoUser } from \"../mongo-protocols\";\r\n\r\nexport class MongoCreateUserRepository implements ICreateUserRepository {\r\n  async createUser(params: CreateUserParams): Promise<User> {\r\n    const { insertedId } = await MongoClient.db\r\n      .collection(\"users\")\r\n      .insertOne(params);\r\n\r\n    const user = await MongoClient.db\r\n      .collection<MongoUser>(\"users\")\r\n      .findOne({ _id: insertedId });\r\n\r\n    if (!user) {\r\n      throw new Error(\"User not created\");\r\n    }\r\n\r\n    const { _id, ...rest } = user;\r\n\r\n    return {\r\n      id: _id.toHexString(),\r\n      ...rest,\r\n    };\r\n  }\r\n}\r\n","import validator from \"validator\";\r\nimport { User } from \"../../models/user\";\r\nimport { badRequest, created, serverError } from \"../helpers\";\r\nimport { HttpRequest, HttpResponse, IController } from \"../protocols\";\r\nimport { CreateUserParams, ICreateUserRepository } from \"./protocols\";\r\n\r\nexport class CreateUserController implements IController {\r\n  constructor(private readonly createUserRepository: ICreateUserRepository) {}\r\n\r\n  async handle(\r\n    httpRequest: HttpRequest<CreateUserParams>\r\n  ): Promise<HttpResponse<User | string>> {\r\n    try {\r\n      const requiredFields = [\"firstName\", \"lastName\", \"email\", \"password\"];\r\n\r\n      for (const field of requiredFields) {\r\n        if (!httpRequest?.body?.[field as keyof CreateUserParams]?.length) {\r\n          return badRequest(`O campo ${field} é obrigatório`);\r\n        }\r\n      }\r\n\r\n      const emailIsValid = validator.isEmail(httpRequest.body!.email);\r\n\r\n      if (!emailIsValid) {\r\n        return badRequest(\"E-mail do tipo inválido\");\r\n      }\r\n\r\n      const user = await this.createUserRepository.createUser(\r\n        httpRequest.body!\r\n      );\r\n\r\n      return created<User>(user);\r\n    } catch (error) {\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { ObjectId } from \"mongodb\";\r\nimport {\r\n  IUpdateUserRespository,\r\n  UpdateUserParams,\r\n} from \"../../controllers/update-user/protocols\";\r\nimport { MongoClient } from \"../../database/mongo\";\r\nimport { User } from \"../../models/user\";\r\nimport { MongoUser } from \"../mongo-protocols\";\r\n\r\nexport class MongoUpdateUserRepository implements IUpdateUserRespository {\r\n  async updateUser(\r\n    id: string,\r\n    params: Partial<UpdateUserParams>\r\n  ): Promise<User> {\r\n    await MongoClient.db.collection(\"users\").updateOne(\r\n      { _id: new ObjectId(id) },\r\n      {\r\n        $set: {\r\n          ...params,\r\n        },\r\n      }\r\n    );\r\n\r\n    const user = await MongoClient.db\r\n      .collection<MongoUser>(\"users\")\r\n      .findOne({ _id: new ObjectId(id) });\r\n\r\n    if (!user) {\r\n      throw new Error(\"Não foi possível atualizar o usuário\");\r\n    }\r\n\r\n    const { _id, ...rest } = user;\r\n\r\n    return {\r\n      id: _id.toHexString(),\r\n      ...rest,\r\n    };\r\n  }\r\n}\r\n","import { User } from \"../../models/user\";\r\nimport { badRequest, ok, serverError } from \"../helpers\";\r\nimport { HttpRequest, HttpResponse, IController } from \"../protocols\";\r\nimport { IUpdateUserRespository, UpdateUserParams } from \"./protocols\";\r\n\r\nexport class UpdateUserController implements IController {\r\n  constructor(private readonly updateUserRepository: IUpdateUserRespository) {}\r\n  async handle(\r\n    httpRequest: HttpRequest<UpdateUserParams>\r\n  ): Promise<HttpResponse<User | string>> {\r\n    try {\r\n      const { id } = httpRequest?.params;\r\n      const { body } = httpRequest!;\r\n\r\n      if (!body) {\r\n        return badRequest(\"Faltando informações\");\r\n      }\r\n\r\n      if (!id) {\r\n        return badRequest(\"Faltando ID do usuário\");\r\n      }\r\n\r\n      const allowedFieldsToUpdate: (keyof UpdateUserParams)[] = [\r\n        \"firstName\",\r\n        \"lastName\",\r\n        \"password\",\r\n      ];\r\n\r\n      const someFieldIsNotAllowedToUpdate = Object.keys(body).some(\r\n        (key) => !allowedFieldsToUpdate.includes(key as keyof UpdateUserParams)\r\n      );\r\n\r\n      if (someFieldIsNotAllowedToUpdate) {\r\n        return badRequest(\"Campo recebido não é permitido para alteração\");\r\n      }\r\n\r\n      const user = await this.updateUserRepository.updateUser(id, body);\r\n\r\n      return ok<User>(user);\r\n    } catch (error) {\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { ObjectId } from \"mongodb\";\r\nimport { IDeleteUserRepository } from \"../../controllers/delete-user/protocols\";\r\nimport { MongoClient } from \"../../database/mongo\";\r\nimport { User } from \"../../models/user\";\r\nimport { MongoUser } from \"../mongo-protocols\";\r\n\r\nexport class MongoDeleteUserRepository implements IDeleteUserRepository {\r\n  async deleteUser(id: string): Promise<User> {\r\n    const user = await MongoClient.db\r\n      .collection<MongoUser>(\"users\")\r\n      .findOne({ _id: new ObjectId(id) });\r\n\r\n    if (!user) {\r\n      throw new Error(\"Usuário não encontrado\");\r\n    }\r\n\r\n    const { deletedCount } = await MongoClient.db\r\n      .collection(\"users\")\r\n      .deleteOne({ _id: new ObjectId(id) });\r\n\r\n    if (!deletedCount) {\r\n      throw new Error(\"Usuário não foi deletado\");\r\n    }\r\n\r\n    const { _id, ...rest } = user;\r\n\r\n    return {\r\n      id: _id.toHexString(),\r\n      ...rest,\r\n    };\r\n  }\r\n}\r\n","import { User } from \"../../models/user\";\r\nimport { badRequest, ok, serverError } from \"../helpers\";\r\nimport { HttpRequest, HttpResponse, IController } from \"../protocols\";\r\nimport { IDeleteUserRepository } from \"./protocols\";\r\n\r\nexport class DeleteUserController implements IController {\r\n  constructor(private readonly deleteUserRepository: IDeleteUserRepository) {}\r\n  async handle(\r\n    httpRequest: HttpRequest<any>\r\n  ): Promise<HttpResponse<User | string>> {\r\n    try {\r\n      const id = httpRequest?.params?.id;\r\n\r\n      if (!id) {\r\n        return badRequest(\"Faltando ID do usuário\");\r\n      }\r\n\r\n      const user = await this.deleteUserRepository.deleteUser(id);\r\n\r\n      return ok<User>(user);\r\n    } catch (error) {\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import express from \"express\";\r\nimport { config } from \"dotenv\";\r\nimport { GetUsersController } from \"./controllers/get-users\";\r\nimport { MongoGetUsersRepository } from \"./repositories/get-users/mongo-get-users\";\r\nimport { MongoClient } from \"./database/mongo\";\r\nimport { MongoCreateUserRepository } from \"./repositories/create-user/mongo-create-user\";\r\nimport { CreateUserController } from \"./controllers/create-user\";\r\nimport { MongoUpdateUserRepository } from \"./repositories/update-user/mongo-update-user\";\r\nimport { UpdateUserController } from \"./controllers/update-user\";\r\nimport { MongoDeleteUserRepository } from \"./repositories/delete-user/mongo-delete-user\";\r\nimport { DeleteUserController } from \"./controllers/delete-user\";\r\n\r\nconfig();\r\n\r\nconst main = async () => {\r\n  const app = express();\r\n\r\n  app.use(express.json());\r\n\r\n  const port = process.env.PORT || 8080;\r\n\r\n  await MongoClient.connect();\r\n\r\n  app.listen(port, () => console.log(`Server is runing at localhost:${port}`));\r\n\r\n  app.get(\"/users\", async (req, res) => {\r\n    const mongoGetUsersRepository = new MongoGetUsersRepository();\r\n\r\n    const getUsersController = new GetUsersController(mongoGetUsersRepository);\r\n\r\n    const { body, statusCode } = await getUsersController.handle();\r\n    res.status(statusCode).send(body);\r\n  });\r\n\r\n  app.post(\"/users\", async (req, res) => {\r\n    const mongoCreateUserRepository = new MongoCreateUserRepository();\r\n\r\n    const createUserController = new CreateUserController(\r\n      mongoCreateUserRepository\r\n    );\r\n\r\n    const { body, statusCode } = await createUserController.handle({\r\n      body: req.body,\r\n    });\r\n\r\n    console.log(body);\r\n\r\n    res.status(statusCode).send(body);\r\n  });\r\n\r\n  app.patch(\"/users/:id\", async (req, res) => {\r\n    const mongoUpdateUsersRepository = new MongoUpdateUserRepository();\r\n    const updateUserController = new UpdateUserController(\r\n      mongoUpdateUsersRepository\r\n    );\r\n\r\n    const { body, statusCode } = await updateUserController.handle({\r\n      body: req.body,\r\n      params: req.params,\r\n    });\r\n\r\n    res.status(statusCode).send(body);\r\n  });\r\n\r\n  app.delete(\"/users/:id\", async (req, res) => {\r\n    const mongoDeleteUsersRepository = new MongoDeleteUserRepository();\r\n    const deleteUserController = new DeleteUserController(\r\n      mongoDeleteUsersRepository\r\n    );\r\n\r\n    const { body, statusCode } = await deleteUserController.handle({\r\n      params: req.params,\r\n    });\r\n\r\n    res.status(statusCode).send(body);\r\n  });\r\n};\r\n\r\nmain();\r\n"],"names":["HttpStatusCode","ok","body","statusCode","OK","badRequest","message","BAD_REQUEST","serverError","SERVER_ERROR","GetUsersController","getUsersRepository","this","prototype","handle","_handle","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","getUsers","sent","t0","abrupt","stop","apply","arguments","MongoClient","client","undefined","db","connect","_this","url","username","password","process","env","MONGODB_URL","MONGODB_USERNAME","MONGODB_PASSWORD","Mongo","auth","console","log","MongoGetUsersRepository","_getUsers","collection","find","toArray","users","map","_ref","_id","_extends","_objectWithoutPropertiesLoose","_excluded","id","toHexString","MongoCreateUserRepository","createUser","_createUser","params","insertedId","user","rest","insertOne","findOne","Error","_x","CreateUserController","createUserRepository","httpRequest","_i","_requiredFields","_httpRequest$body","_httpRequest$body$fie","field","length","validator","isEmail","email","created","CREATED","MongoUpdateUserRepository","updateUser","_updateUser","updateOne","ObjectId","$set","_x2","UpdateUserController","updateUserRepository","allowedFieldsToUpdate","Object","keys","some","key","includes","MongoDeleteUserRepository","deleteUser","_deleteUser","deleteOne","deletedCount","DeleteUserController","deleteUserRepository","_httpRequest$params","config","_callee5","app","port","_context5","express","use","json","PORT","listen","get","_ref2","req","res","mongoGetUsersRepository","getUsersController","_yield$getUsersContro","status","send","post","_ref3","_callee2","mongoCreateUserRepository","createUserController","_yield$createUserCont","_context2","_x3","_x4","patch","_ref4","_callee3","mongoUpdateUsersRepository","updateUserController","_yield$updateUserCont","_context3","_x5","_x6","_ref5","_callee4","mongoDeleteUsersRepository","deleteUserController","_yield$deleteUserCont","_context4","_x7","_x8","main"],"mappings":"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"}