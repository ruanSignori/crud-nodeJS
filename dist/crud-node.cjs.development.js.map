{"version":3,"file":"crud-node.cjs.development.js","sources":["../src/controllers/protocols.ts","../src/controllers/helpers.ts","../src/controllers/get-users/index.ts","../src/database/mongo.ts","../src/repositories/get-users/mongo-get-users.ts","../src/repositories/create-user/mongo-create-user.ts","../src/controllers/create-user/index.ts","../src/repositories/update-user/mongo-update-user.ts","../src/controllers/update-user/index.ts","../src/repositories/delete-user/mongo-delete-user.ts","../src/controllers/delete-user/index.ts","../src/index.ts"],"sourcesContent":["export interface HttpResponse<T> {\r\n  statusCode: HttpStatusCode;\r\n  body: T;\r\n}\r\n\r\nexport interface HttpRequest<Body> {\r\n  params?: any;\r\n  headers?: any;\r\n  body?: Body;\r\n}\r\n\r\nexport enum HttpStatusCode {\r\n  OK = 200,\r\n  CREATED = 201,\r\n  BAD_REQUEST = 400,\r\n  SERVER_ERROR = 500,\r\n}\r\n\r\nexport interface IController {\r\n  handle(httpRequest: HttpRequest<unknown>): Promise<HttpResponse<unknown>>;\r\n}\r\n","import { HttpResponse, HttpStatusCode } from \"./protocols\";\r\n\r\nexport const ok = <T>(body: any): HttpResponse<T> => ({\r\n  statusCode: HttpStatusCode.OK,\r\n  body: body,\r\n});\r\n\r\nexport const created = <T>(body: any): HttpResponse<T> => ({\r\n  statusCode: HttpStatusCode.CREATED,\r\n  body: body,\r\n});\r\n\r\nexport const badRequest = (message: string): HttpResponse<string> => {\r\n  return {\r\n    statusCode: HttpStatusCode.BAD_REQUEST,\r\n    body: message,\r\n  };\r\n};\r\n\r\nexport const serverError = (): HttpResponse<string> => {\r\n  return {\r\n    statusCode: HttpStatusCode.SERVER_ERROR,\r\n    body: \"Algo deu errado\",\r\n  };\r\n};\r\n","import { User } from \"../../models/user\";\r\nimport { badRequest, ok, serverError } from \"../helpers\";\r\nimport { HttpResponse, IController } from \"../protocols\";\r\nimport { IGetUsersRepository } from \"./protocols\";\r\n\r\nexport class GetUsersController implements IController {\r\n  constructor(private readonly getUsersRepository: IGetUsersRepository) {}\r\n\r\n  async handle(): Promise<HttpResponse<User[] | string>> {\r\n    try {\r\n      const users = await this.getUsersRepository.getUsers();\r\n\r\n      return ok<User[]>(users);\r\n    } catch (error) {\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { MongoClient as Mongo, Db } from \"mongodb\";\r\n\r\nexport const MongoClient = {\r\n  client: undefined as unknown as Mongo,\r\n  db: undefined as unknown as Db,\r\n\r\n  async connect(): Promise<void> {\r\n    const url = process.env.MONGODB_URL || \"localhost:27017\";\r\n    const username = process.env.MONGODB_USERNAME;\r\n    const password = process.env.MONGODB_PASSWORD;\r\n\r\n    const client = new Mongo(url, { auth: { username, password } });\r\n    const db = client.db(\"users-db\");\r\n\r\n    this.client = client;\r\n    this.db = db;\r\n\r\n    console.log(\"Connect to mongodb\");\r\n  },\r\n};\r\n","import { IGetUsersRepository } from \"../../controllers/get-users/protocols\";\r\nimport { MongoClient } from \"../../database/mongo\";\r\nimport { User } from \"../../models/user\";\r\nimport { MongoUser } from \"../mongo-protocols\";\r\n\r\nexport class MongoGetUsersRepository implements IGetUsersRepository {\r\n  async getUsers(): Promise<User[]> {\r\n    const users = await MongoClient.db\r\n      .collection<MongoUser>(\"users\")\r\n      .find({})\r\n      .toArray();\r\n\r\n    return users.map(({ _id, ...rest }) => ({\r\n      ...rest,\r\n      id: _id.toHexString(),\r\n    }));\r\n  }\r\n}\r\n","import {\r\n  CreateUserParams,\r\n  ICreateUserRepository,\r\n} from \"../../controllers/create-user/protocols\";\r\nimport { MongoClient } from \"../../database/mongo\";\r\nimport { User } from \"../../models/user\";\r\nimport { MongoUser } from \"../mongo-protocols\";\r\n\r\nexport class MongoCreateUserRepository implements ICreateUserRepository {\r\n  async createUser(params: CreateUserParams): Promise<User> {\r\n    const { insertedId } = await MongoClient.db\r\n      .collection(\"users\")\r\n      .insertOne(params);\r\n\r\n    const user = await MongoClient.db\r\n      .collection<MongoUser>(\"users\")\r\n      .findOne({ _id: insertedId });\r\n\r\n    if (!user) {\r\n      throw new Error(\"User not created\");\r\n    }\r\n\r\n    const { _id, ...rest } = user;\r\n\r\n    return {\r\n      id: _id.toHexString(),\r\n      ...rest,\r\n    };\r\n  }\r\n}\r\n","import validator from \"validator\";\r\nimport { User } from \"../../models/user\";\r\nimport { badRequest, created, serverError } from \"../helpers\";\r\nimport { HttpRequest, HttpResponse, IController } from \"../protocols\";\r\nimport { CreateUserParams, ICreateUserRepository } from \"./protocols\";\r\n\r\nexport class CreateUserController implements IController {\r\n  constructor(private readonly createUserRepository: ICreateUserRepository) {}\r\n\r\n  async handle(\r\n    httpRequest: HttpRequest<CreateUserParams>\r\n  ): Promise<HttpResponse<User | string>> {\r\n    try {\r\n      const requiredFields = [\"firstName\", \"lastName\", \"email\", \"password\"];\r\n\r\n      for (const field of requiredFields) {\r\n        if (!httpRequest?.body?.[field as keyof CreateUserParams]?.length) {\r\n          return badRequest(`O campo ${field} é obrigatório`);\r\n        }\r\n      }\r\n\r\n      const emailIsValid = validator.isEmail(httpRequest.body!.email);\r\n\r\n      if (!emailIsValid) {\r\n        return badRequest(\"E-mail do tipo inválido\");\r\n      }\r\n\r\n      const user = await this.createUserRepository.createUser(\r\n        httpRequest.body!\r\n      );\r\n\r\n      return created<User>(user);\r\n    } catch (error) {\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { ObjectId } from \"mongodb\";\r\nimport {\r\n  IUpdateUserRespository,\r\n  UpdateUserParams,\r\n} from \"../../controllers/update-user/protocols\";\r\nimport { MongoClient } from \"../../database/mongo\";\r\nimport { User } from \"../../models/user\";\r\nimport { MongoUser } from \"../mongo-protocols\";\r\n\r\nexport class MongoUpdateUserRepository implements IUpdateUserRespository {\r\n  async updateUser(\r\n    id: string,\r\n    params: Partial<UpdateUserParams>\r\n  ): Promise<User> {\r\n    await MongoClient.db.collection(\"users\").updateOne(\r\n      { _id: new ObjectId(id) },\r\n      {\r\n        $set: {\r\n          ...params,\r\n        },\r\n      }\r\n    );\r\n\r\n    const user = await MongoClient.db\r\n      .collection<MongoUser>(\"users\")\r\n      .findOne({ _id: new ObjectId(id) });\r\n\r\n    if (!user) {\r\n      throw new Error(\"Não foi possível atualizar o usuário\");\r\n    }\r\n\r\n    const { _id, ...rest } = user;\r\n\r\n    return {\r\n      id: _id.toHexString(),\r\n      ...rest,\r\n    };\r\n  }\r\n}\r\n","import { User } from \"../../models/user\";\r\nimport { badRequest, ok, serverError } from \"../helpers\";\r\nimport { HttpRequest, HttpResponse, IController } from \"../protocols\";\r\nimport { IUpdateUserRespository, UpdateUserParams } from \"./protocols\";\r\n\r\nexport class UpdateUserController implements IController {\r\n  constructor(private readonly updateUserRepository: IUpdateUserRespository) {}\r\n  async handle(\r\n    httpRequest: HttpRequest<UpdateUserParams>\r\n  ): Promise<HttpResponse<User | string>> {\r\n    try {\r\n      const { id } = httpRequest?.params;\r\n      const { body } = httpRequest!;\r\n\r\n      if (!body) {\r\n        return badRequest(\"Faltando informações\");\r\n      }\r\n\r\n      if (!id) {\r\n        return badRequest(\"Faltando ID do usuário\");\r\n      }\r\n\r\n      const allowedFieldsToUpdate: (keyof UpdateUserParams)[] = [\r\n        \"firstName\",\r\n        \"lastName\",\r\n        \"password\",\r\n      ];\r\n\r\n      const someFieldIsNotAllowedToUpdate = Object.keys(body).some(\r\n        (key) => !allowedFieldsToUpdate.includes(key as keyof UpdateUserParams)\r\n      );\r\n\r\n      if (someFieldIsNotAllowedToUpdate) {\r\n        return badRequest(\"Campo recebido não é permitido para alteração\");\r\n      }\r\n\r\n      const user = await this.updateUserRepository.updateUser(id, body);\r\n\r\n      return ok<User>(user);\r\n    } catch (error) {\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import { ObjectId } from \"mongodb\";\r\nimport { IDeleteUserRepository } from \"../../controllers/delete-user/protocols\";\r\nimport { MongoClient } from \"../../database/mongo\";\r\nimport { User } from \"../../models/user\";\r\nimport { MongoUser } from \"../mongo-protocols\";\r\n\r\nexport class MongoDeleteUserRepository implements IDeleteUserRepository {\r\n  async deleteUser(id: string): Promise<User> {\r\n    const user = await MongoClient.db\r\n      .collection<MongoUser>(\"users\")\r\n      .findOne({ _id: new ObjectId(id) });\r\n\r\n    if (!user) {\r\n      throw new Error(\"Usuário não encontrado\");\r\n    }\r\n\r\n    const { deletedCount } = await MongoClient.db\r\n      .collection(\"users\")\r\n      .deleteOne({ _id: new ObjectId(id) });\r\n\r\n    if (!deletedCount) {\r\n      throw new Error(\"Usuário não foi deletado\");\r\n    }\r\n\r\n    const { _id, ...rest } = user;\r\n\r\n    return {\r\n      id: _id.toHexString(),\r\n      ...rest,\r\n    };\r\n  }\r\n}\r\n","import { User } from \"../../models/user\";\r\nimport { badRequest, ok, serverError } from \"../helpers\";\r\nimport { HttpRequest, HttpResponse, IController } from \"../protocols\";\r\nimport { IDeleteUserRepository } from \"./protocols\";\r\n\r\nexport class DeleteUserController implements IController {\r\n  constructor(private readonly deleteUserRepository: IDeleteUserRepository) {}\r\n  async handle(\r\n    httpRequest: HttpRequest<any>\r\n  ): Promise<HttpResponse<User | string>> {\r\n    try {\r\n      const id = httpRequest?.params?.id;\r\n\r\n      if (!id) {\r\n        return badRequest(\"Faltando ID do usuário\");\r\n      }\r\n\r\n      const user = await this.deleteUserRepository.deleteUser(id);\r\n\r\n      return ok<User>(user);\r\n    } catch (error) {\r\n      return serverError();\r\n    }\r\n  }\r\n}\r\n","import express from \"express\";\r\nimport { config } from \"dotenv\";\r\nimport { GetUsersController } from \"./controllers/get-users\";\r\nimport { MongoGetUsersRepository } from \"./repositories/get-users/mongo-get-users\";\r\nimport { MongoClient } from \"./database/mongo\";\r\nimport { MongoCreateUserRepository } from \"./repositories/create-user/mongo-create-user\";\r\nimport { CreateUserController } from \"./controllers/create-user\";\r\nimport { MongoUpdateUserRepository } from \"./repositories/update-user/mongo-update-user\";\r\nimport { UpdateUserController } from \"./controllers/update-user\";\r\nimport { MongoDeleteUserRepository } from \"./repositories/delete-user/mongo-delete-user\";\r\nimport { DeleteUserController } from \"./controllers/delete-user\";\r\n\r\nconfig();\r\n\r\nconst main = async () => {\r\n  const app = express();\r\n\r\n  app.use(express.json());\r\n\r\n  const port = process.env.PORT || 8080;\r\n\r\n  await MongoClient.connect();\r\n\r\n  app.listen(port, () => console.log(`Server is runing at localhost:${port}`));\r\n\r\n  app.get(\"/users\", async (req, res) => {\r\n    const mongoGetUsersRepository = new MongoGetUsersRepository();\r\n\r\n    const getUsersController = new GetUsersController(mongoGetUsersRepository);\r\n\r\n    const { body, statusCode } = await getUsersController.handle();\r\n    res.status(statusCode).send(body);\r\n  });\r\n\r\n  app.post(\"/users\", async (req, res) => {\r\n    const mongoCreateUserRepository = new MongoCreateUserRepository();\r\n\r\n    const createUserController = new CreateUserController(\r\n      mongoCreateUserRepository\r\n    );\r\n\r\n    const { body, statusCode } = await createUserController.handle({\r\n      body: req.body,\r\n    });\r\n\r\n    console.log(body);\r\n\r\n    res.status(statusCode).send(body);\r\n  });\r\n\r\n  app.patch(\"/users/:id\", async (req, res) => {\r\n    const mongoUpdateUsersRepository = new MongoUpdateUserRepository();\r\n    const updateUserController = new UpdateUserController(\r\n      mongoUpdateUsersRepository\r\n    );\r\n\r\n    const { body, statusCode } = await updateUserController.handle({\r\n      body: req.body,\r\n      params: req.params,\r\n    });\r\n\r\n    res.status(statusCode).send(body);\r\n  });\r\n\r\n  app.delete(\"/users/:id\", async (req, res) => {\r\n    const mongoDeleteUsersRepository = new MongoDeleteUserRepository();\r\n    const deleteUserController = new DeleteUserController(\r\n      mongoDeleteUsersRepository\r\n    );\r\n\r\n    const { body, statusCode } = await deleteUserController.handle({\r\n      params: req.params,\r\n    });\r\n\r\n    res.status(statusCode).send(body);\r\n  });\r\n};\r\n\r\nmain();\r\n"],"names":["HttpStatusCode","ok","body","statusCode","OK","created","CREATED","badRequest","message","BAD_REQUEST","serverError","SERVER_ERROR","GetUsersController","getUsersRepository","handle","getUsers","users","MongoClient","client","undefined","db","connect","url","process","env","MONGODB_URL","username","MONGODB_USERNAME","password","MONGODB_PASSWORD","Mongo","auth","console","log","MongoGetUsersRepository","collection","find","toArray","map","_id","rest","_excluded","id","toHexString","MongoCreateUserRepository","createUser","params","insertOne","insertedId","findOne","user","Error","CreateUserController","createUserRepository","httpRequest","requiredFields","field","length","emailIsValid","validator","isEmail","email","MongoUpdateUserRepository","updateUser","updateOne","ObjectId","$set","UpdateUserController","updateUserRepository","allowedFieldsToUpdate","someFieldIsNotAllowedToUpdate","Object","keys","some","key","includes","MongoDeleteUserRepository","deleteUser","deleteOne","deletedCount","DeleteUserController","deleteUserRepository","config","main","app","express","use","json","port","PORT","listen","get","req","res","mongoGetUsersRepository","getUsersController","status","send","post","mongoCreateUserRepository","createUserController","patch","mongoUpdateUsersRepository","updateUserController","mongoDeleteUsersRepository","deleteUserController"],"mappings":"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"}